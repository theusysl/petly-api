// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- MODELS DE USUÁRIOS E AUTENTICAÇÃO ---
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  phone       String? // Campo adicionado
  address     String? // Campo adicionado
  reputation  Int      @default(0) // Campo adicionado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  pets              Pet[]
  adoptionRequests  AdoptionRequest[]
  reports           Report[]
  eventsOrganized   Event[]
  temporaryHome     TemporaryHome?
  educationalContent EducationalContent[]
}

// --- MODELS PRINCIPAIS DA APLICAÇÃO ---
model Pet {
  id            Int       @id @default(autoincrement())
  name          String
  species       String
  breed         String?
  age           Int?
  sex           String?   // Campo adicionado
  description   String?
  photoUrl      String?   // Campo adicionado
  latitude      Float?    // Campo adicionado
  longitude     Float?    // Campo adicionado
  status        PetStatus @default(AVAILABLE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamento com o dono (usuário)
  ownerId       Int
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  adoptionRequests AdoptionRequest[]
}

model AdoptionRequest {
  id        Int           @id @default(autoincrement())
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relacionamentos
  userId    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId     Int
  pet       Pet           @relation(fields: [petId], references: [id], onDelete: Cascade)
}

model Report {
  id          Int          @id @default(autoincrement())
  description String
  photoUrl    String?      // Campo adicionado
  videoUrl    String?      // Campo adicionado
  latitude    Float?       // Campo adicionado
  longitude   Float?       // Campo adicionado
  status      ReportStatus @default(OPEN)
  createdAt   DateTime     @default(now())

  // Relacionamento opcional para denúncias anônimas
  reporterId  Int?
  reporter    User?        @relation(fields: [reporterId], references: [id], onDelete: SetNull)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  location    String
  createdAt   DateTime @default(now())

  // Relacionamento com o organizador (usuário)
  organizerId Int
  organizer   User     @relation(fields: [organizerId], references: [id], onDelete: Cascade)
}

// --- NOVOS MODELS DA DOCUMENTAÇÃO ---
model TemporaryHome {
  id            Int     @id @default(autoincrement())
  capacity      Int     // Quantos animais pode abrigar
  observations  String?
  isActive      Boolean @default(true)

  // Relacionamento 1-para-1 com User
  userId        Int     @unique
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EducationalContent {
    id          Int      @id @default(autoincrement())
    title       String
    type        String   // "artigo", "video", "guia"
    url         String
    createdAt   DateTime @default(now())

    authorId    Int
    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// --- ENUMS ---
enum Role {
  USER
  ONG
  VET
  ADMIN
}

enum PetStatus {
  AVAILABLE
  ADOPTED
  LOST
  FOUND // Status adicionado
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}